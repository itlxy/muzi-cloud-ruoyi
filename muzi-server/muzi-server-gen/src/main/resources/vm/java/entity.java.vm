package ${packageName}.entity;

#foreach ($import in $importList)
import ${import};
#end
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonFormat;
import ${basePackage}.common.core.annotation.Excel;
import ${basePackage}.common.core.constant.DataValidateGroup;
import ${basePackage}.common.core.annotation.QueryCondition;
import io.swagger.annotations.ApiModelProperty;
import com.baomidou.mybatisplus.annotation.TableName;
import ${basePackage}.common.core.web.domain.BaseEntity;
import io.swagger.annotations.ApiModel;
import ${basePackage}.common.core.enums.MatchType;
import javax.validation.constraints.*;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
#if($table.crud || $table.sub)
#elseif($table.tree)
#end

/**
 * ${functionName}对象 ${tableName}
 * 
 * @author ${author}
 * @date ${datetime}
 */
#if($table.crud || $table.sub)
    #set($Entity="BaseEntity")
#elseif($table.tree)
    #set($Entity="TreeEntity")
#end
@Data
@ToString(callSuper=true)
@EqualsAndHashCode(callSuper = true)
@TableName("${tableName}")
@ApiModel(value = "${functionName}对象 ${tableName}", description = "${functionName}对象 ${tableName}")
public class ${ClassName}Entity extends ${Entity} implements Serializable
{
    private static final long serialVersionUID = 1L;

#foreach ($column in $columns)
    #if(!$table.isSuperColumn($column.javaField))
    /**
     * $column.columnComment
     */
    @ApiModelProperty(value = "$column.columnComment")
        #if($column.list)
            #set($parentheseIndex=$column.columnComment.indexOf("（"))
            #if($parentheseIndex != -1)
                #set($comment=$column.columnComment.substring(0, $parentheseIndex))
            #else
                #set($comment=$column.columnComment)
            #end
##            #if($column.javaType == 'String'||$column.javaType == 'Integer'||$column.javaType == 'Long'||$column.javaType == 'BigDecimal')
            #if($column.columnType.indexOf("(")!=-1)
                #set($preIndex=$column.columnType.indexOf("(")+1)
                #set($aftIndex=$column.columnType.indexOf(")"))
                #set($fieldLength=$column.columnType.substring($preIndex, $aftIndex))
                #if($column.javaType == 'BigDecimal')
                    #set($midIndex=$column.columnType.indexOf(","))
                    #set($midAftIndex=$column.columnType.indexOf(",")+1)
                    #set($preFieldLength=$column.columnType.substring($preIndex, $midIndex))
                    #set($aftFieldLength=$column.columnType.substring($midAftIndex, $aftIndex))
                #end
            #end
            #if($column.javaType == 'String')
    @NotBlank(message = "$comment 不能为空",groups = {DataValidateGroup.FormUpdate.class,
            DataValidateGroup.FormSave.class,
            DataValidateGroup.ExcelSave.class})
    @Size(max = $fieldLength ,message = "$comment 的最大长度不能超过 $fieldLength 位",groups = {DataValidateGroup.FormUpdate.class,
            DataValidateGroup.PageQuery.class,
            DataValidateGroup.FormSave.class,
            DataValidateGroup.ExcelSave.class})
            #elseif($column.javaType == 'Integer' ||$column.javaType == 'Long')
    @NotNull(message = "$comment 不能为空",groups = {DataValidateGroup.FormUpdate.class,
            DataValidateGroup.FormSave.class,
            DataValidateGroup.ExcelSave.class})
    @PositiveOrZero(message = "$comment 必须为大于或等于0的整数",groups = {DataValidateGroup.FormUpdate.class,
            DataValidateGroup.PageQuery.class,
            DataValidateGroup.FormSave.class,
            DataValidateGroup.ExcelSave.class})
            #elseif($column.javaType == 'BigDecimal')
    @NotNull(message = "$comment 不能为空",groups = {DataValidateGroup.FormUpdate.class,
            DataValidateGroup.FormSave.class,
            DataValidateGroup.ExcelSave.class})
    @Min(value = 0,message ="$comment 必须大于或等于0" ,groups = {DataValidateGroup.FormUpdate.class,
            DataValidateGroup.PageQuery.class,
            DataValidateGroup.FormSave.class,
            DataValidateGroup.ExcelSave.class})
    @Digits(integer = $preFieldLength, fraction = $aftFieldLength, message = "$comment 的整数位数不能超过 $preFieldLength 位，小数位数不能超过 $aftFieldLength 位",groups = {DataValidateGroup.FormUpdate.class,
            DataValidateGroup.PageQuery.class,
            DataValidateGroup.FormSave.class,
            DataValidateGroup.ExcelSave.class})
            #else
    @NotNull(message = "$comment 不能为空",groups = {DataValidateGroup.FormUpdate.class,
            DataValidateGroup.FormSave.class,
            DataValidateGroup.ExcelSave.class})
            #end
            #if($parentheseIndex != -1)
    @Excel(name = "${comment}", sort=$foreach.count, readConverterExp = "$column.readConverterExp()", combo = { $column.combo() }, type = Excel.Type.ALL)
            #elseif($column.javaType == 'Date'||$column.javaType == 'LocalDateTime')
    @DateTimeFormat(pattern = "yyyy-MM-dd HH:mm:ss")
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
    @Excel(name = "${comment}", sort=$foreach.count, width = 30, dateFormat = "yyyy-MM-dd HH:mm:ss"#if($column.isRequired), prompt="必填"#end, type = Excel.Type.ALL)
            #elseif($column.javaType == 'LocalDate')
    @DateTimeFormat(pattern = "yyyy-MM-dd")
    @JsonFormat(pattern = "yyyy-MM-dd")
    @Excel(name = "${comment}", sort=$foreach.count, width = 30, dateFormat = "yyyy-MM-dd"#if($column.isRequired), prompt="必填"#end, type = Excel.Type.ALL)
            #elseif($column.javaType == 'LocalTime')
    @DateTimeFormat(pattern = "HH:mm:ss")
    @JsonFormat(pattern = "HH:mm:ss")
    @Excel(name = "${comment}", sort=$foreach.count, width = 30, dateFormat = "HH:mm:ss"#if($column.isRequired), prompt="必填"#end, type = Excel.Type.ALL)
            #else
    @Excel(name = "${comment}",sort=$foreach.count#if($column.isRequired), prompt="必填"#end, type = Excel.Type.ALL)
            #end
        #end
        #if($column.isPk())
    @NotNull(message = "主键 不能为空",groups = {DataValidateGroup.FormUpdate.class})
    @Null(message = "主键 不允许传值",groups = {DataValidateGroup.FormSave.class,
            DataValidateGroup.ExcelSave.class})
        #end
        #if($column.queryType == "LIKE")
    @QueryCondition(column = "$column.javaField",func= MatchType.$column.queryType)
        #else
    @QueryCondition(column = "$column.javaField",func= MatchType.EQ)
        #end
    private $column.javaType $column.javaField;

    #end
#end
#if($table.sub)
    /** $table.subTable.functionName信息 */
    private List<${subClassName}> ${subclassName}List;

#end
###foreach ($column in $columns)
##    #if(!$table.isSuperColumn($column.javaField))
##        #if($column.javaField.length() > 2 && $column.javaField.substring(1,2).matches("[A-Z]"))
##            #set($AttrName=$column.javaField)
##        #else
##            #set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
##        #end
##    public void set${AttrName}($column.javaType $column.javaField)
##    {
##        this.$column.javaField = $column.javaField;
##    }
##
##    public $column.javaType get${AttrName}()
##    {
##        return $column.javaField;
##    }
##    #end
###end
##
###if($table.sub)
##    public List<${subClassName}> get${subClassName}List()
##    {
##        return ${subclassName}List;
##    }
##
##    public void set${subClassName}List(List<${subClassName}> ${subclassName}List)
##    {
##        this.${subclassName}List = ${subclassName}List;
##    }
##
###end
##
##    @Override
##    public String toString() {
##        return new ToStringBuilder(this,ToStringStyle.MULTI_LINE_STYLE)
###foreach ($column in $columns)
##    #if($column.javaField.length() > 2 && $column.javaField.substring(1,2).matches("[A-Z]"))
##        #set($AttrName=$column.javaField)
##    #else
##        #set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
##    #end
##            .append("${column.javaField}", get${AttrName}())
###end
###if($table.sub)
##            .append("${subclassName}List", get${subClassName}List())
###end
##            .toString();
##    }
}
